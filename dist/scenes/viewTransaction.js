"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.viewTransactionScene = void 0;
const telegraf_1 = require("telegraf");
const keyboards_1 = require("../utils/keyboards");
const parseSingleDate = (dateInput) => {
    const date = /^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.([0-9]{4})$/;
    if (date.test(dateInput)) {
        const parts = dateInput.split('.');
        const day = parts[0];
        const month = parts[1];
        const year = parts[2];
        return `${year}-${month}-${day}`;
    }
    else {
        return null;
    }
};
const processDateInput = (dateInput) => {
    if (dateInput.includes(`-`)) {
        const dates = dateInput.split(`-`).map(d => d.trim());
        if (dates.length != 2) {
            return null;
        }
        const startDate = parseSingleDate(dates[0]);
        const endDate = parseSingleDate(dates[1]);
        if (startDate && endDate) {
            if (new Date(startDate) > new Date(endDate)) {
                return null;
            }
            return { startDate, endDate };
        }
    }
    else {
        const singleDate = parseSingleDate(dateInput);
        if (singleDate) {
            return { startDate: singleDate, endDate: singleDate };
        }
        return null;
    }
};
exports.viewTransactionScene = new telegraf_1.Scenes.WizardScene(`viewTransactionScene`, async (ctx) => {
    await ctx.reply(`–ö–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å?`, keyboards_1.keyboards.mainCategoriesKeyboard);
    return ctx.wizard.next();
}, async (ctx) => {
    const type = ctx.message.text;
    if (type === 'üìà –î–æ—Ö–æ–¥—ã') {
        ctx.wizard.state.transactionType = 'income';
    }
    else if (type === 'üìâ –†–∞—Å—Ö–æ–¥—ã') {
        ctx.wizard.state.transactionType = 'expense';
    }
    else if (type === '‚Ü©Ô∏è –ù–∞–∑–∞–¥') {
        await ctx.reply('–ß—Ç–æ –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å ?', keyboards_1.keyboards.startKeyboard);
        return ctx.scene.leave();
    }
    else if (type === 'üí∏ –ë–∞–ª–∞–Ω—Å') {
        await ctx.scene.leave();
        return ctx.scene.enter(`showBalanceScene`);
    }
    else {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ "–î–æ—Ö–æ–¥—ã" –∏–ª–∏ "–†–∞—Å—Ö–æ–¥—ã"');
    }
    await ctx.reply(`–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n- **–¥–¥.–º–º.–≥–≥–≥–≥** (–¥–ª—è –æ–¥–Ω–æ–π –¥–∞—Ç—ã)\n- **–¥–¥.–º–º.–≥–≥–≥–≥-–¥–¥.–º–º.–≥–≥–≥–≥** (–¥–ª—è –ø–µ—Ä–∏–æ–¥–∞)`, { parse_mode: "Markdown" });
    return ctx.wizard.next();
}, async (ctx) => {
    const userInput = ctx.message?.text;
    const userId = ctx.from.id;
    const transactionType = ctx.wizard.state.transactionType;
    if (!transactionType) {
        await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.`, keyboards_1.keyboards.startKeyboard);
        return ctx.scene.leave();
    }
    if (userInput === '‚Ü©Ô∏è –ù–∞–∑–∞–¥') {
        await ctx.reply('–ß—Ç–æ –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å?', keyboards_1.keyboards.startKeyboard);
        return ctx.wizard.back();
    }
    ;
    const date = processDateInput(userInput);
    let transactions;
    if (typeof date === null) {
        await ctx.reply(`–ù–∞ –º–æ–º–µ–Ω—Ç–µ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â–µ —Ä–∞–∑. \n–§–æ—Ä–º–∞—Ç –¥–ª—è –¥–∞—Ç—ã: **–¥–¥.–º–º.–≥–≥–≥–≥**. \n–§–æ—Ä–º–∞—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–∞: **–¥–¥.–º–º.–≥–≥–≥–≥-–¥–¥.–º–º.–≥–≥–≥–≥**. `);
    }
    else if (transactionType === 'income') {
        if (date?.startDate === date?.endDate) {
            transactions = await ctx.transactionRepository.viewTransactionIncomeDay(userId, date?.startDate);
        }
        else {
            transactions = await ctx.transactionRepository.viewTransactionIncomePeriod(userId, date?.startDate, date?.endDate);
        }
    }
    else if (transactionType === 'expense') {
        if (date?.startDate === date?.endDate) {
            transactions = await ctx.transactionRepository.viewTransactionExpenseDay(userId, date?.startDate);
        }
        else {
            transactions = await ctx.transactionRepository.viewTransactionExpensePeriod(userId, date?.startDate, date?.endDate);
        }
    }
    else {
        await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. -------`);
    }
    let message = `**–í–∞—à–∏ ${transactionType === 'income' ? '–¥–æ—Ö–æ–¥—ã' : '—Ä–∞—Å—Ö–æ–¥—ã'}:**\n\n`;
    if (transactions.length === 0) {
        message += `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥`;
    }
    else {
        transactions.forEach((t) => {
            message += `${t.date} | ${t.category}: ${t.amount.toFixed(2)} UAH\n`;
        });
    }
    await ctx.reply(message, { parse_mode: "Markdown" });
    await ctx.reply('–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', keyboards_1.keyboards.startKeyboard);
    return ctx.scene.leave();
});
