import { Telegraf, Scenes, session } from "telegraf";
import { keyboards } from "../utils/keyboards";
import { database } from "../config/db";
import { MyContext } from "../utils/types";
import { ITransaction, TransactionRepository } from "../repositories/TransactionRepository";


export const recordTransactionScene = new Scenes.WizardScene<MyContext>(
        `recordTransactionScene`, 
    async (ctx) => {

        await ctx.reply(`–ß—Ç–æ –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å?`, keyboards.mainCategoriesKeyboard); 
        return ctx.wizard.next(); 
        },

        async(ctx) => { 
            if(!ctx.message || !('text' in ctx.message) || !ctx.from.id) { 
                await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫.`);
                return ctx.wizard.back();
            }

            const userId: number = ctx.from.id;
            const type: string | undefined = ctx.message.text;
            const currency = ctx.transactionRepository.getUserCurrency(userId) || "UAH"; 

            if (type === 'üìà –î–æ—Ö–æ–¥—ã') { 
                ctx.wizard.state.transactionType = "income";
             
                const totalIncome:number = ctx.transactionRepository.getTotalIncome(userId); 
                const formattedTotalIncome: string = totalIncome.toLocaleString(`ru-RU`, {minimumFractionDigits: 2, maximumFractionDigits: 2});


                await ctx.reply(`üí∞ –í–∞—à –æ–±—â–∏–π –¥–æ—Ö–æ–¥: ${formattedTotalIncome} ${currency}. \n–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞: `, keyboards.incomeCategoriesKeyboard);
                return ctx.wizard.next(); 
            } else if(type === 'üìâ –†–∞—Å—Ö–æ–¥—ã') {
                ctx.wizard.state.transactionType = "expense";
             
                const totalExpense: number = ctx.transactionRepository.getTotalExpense(userId);                 
                const formattedTotalExpense = totalExpense.toLocaleString(`ru-RU`, {minimumFractionDigits: 2, maximumFractionDigits: 2});


                await ctx.reply(`üí∞ –í–∞—à –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ${formattedTotalExpense} ${currency}. \n–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤: `, keyboards.expenseCategoriesKeyboard);
                return ctx.wizard.next();
            } else if (type ==='‚Ü©Ô∏è –ù–∞–∑–∞–¥') {
                await ctx.reply(`–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥.`, keyboards.startKeyboard); 
                return ctx.wizard.back();
                 

            } else if (type === 'üí∏ –ë–∞–ª–∞–Ω—Å') {
                return ctx.scene.enter(`showBalanceScene`);  
            } else { 
                await ctx.reply(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–Ω–æ–≤–æ.`, keyboards.startKeyboard);
                return ctx.scene.leave(); 
        }
    },

        async(ctx) => { 
            if(!ctx.message || !('text' in ctx.message) || !ctx.from.id) { 
                await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫.`);
                return ctx.wizard.back();
            }

            const incomeCategories:string[] = ['üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞', 'üíª –§—Ä–∏–ª–∞–Ω—Å','üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'üéÅ –ü–æ–¥–∞—Ä–∫–∏','‚ûï –î—Ä—É–≥–æ–µ'];
            const expenseCategories: string[]  =['üçî –ï–¥–∞', 'üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç','üè† –ñ–∏–ª—å–µ', 'üí° –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏','üëï –û–¥–µ–∂–¥–∞', 'üè• –ó–¥–æ—Ä–æ–≤—å–µ','üöó –ú–∞—à–∏–Ω–∞']; 

            const inputCategory: string  = ctx.message.text; 

            const isIncomeCategory = incomeCategories.includes(inputCategory); 
            const isExpenseCategory = expenseCategories.includes(inputCategory); 

            if(isIncomeCategory) {
                ctx.wizard.state.transactionCategory = inputCategory;
                await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏: `);
                return ctx.wizard.next(); 
            } else if (isExpenseCategory) { 
                ctx.wizard.state.transactionCategory = inputCategory; 
                await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏: `);
                return ctx.wizard.next();
            } else if (inputCategory === '‚Ü©Ô∏è –ù–∞–∑–∞–¥') {
                await ctx.reply(`–ß—Ç–æ –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å?`, keyboards.mainCategoriesKeyboard); 
                return ctx.wizard.back();  
            } else if (inputCategory === 'üí∏ –ë–∞–ª–∞–Ω—Å') { 
                await ctx.scene.leave(); 
                return ctx.scene.enter(`showBalanceScene`); 
            } else { 
                await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ :)`, keyboards.startKeyboard);
                return ctx.scene.leave();
            }
        },

        async (ctx) => { 
            if(!ctx.message || !('text' in ctx.message) || !ctx.from.id) { 
                await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫.`);
                return ctx.wizard.back();
            }
            
            const amountText: string | undefined = ctx.message.text;
            const userId: number = ctx.from.id;
            

            if(amountText === '‚Ü©Ô∏è –ù–∞–∑–∞–¥') { 
                await ctx.reply(`–í–æ–∑–≤—Ä–∞–∑–∞–µ–º—Å—è –Ω–∞–∑–∞–¥.`);
                return ctx.wizard.back(); 
            }
            if ( amountText === 'üí∏ –ë–∞–ª–∞–Ω—Å') { 
                await ctx.scene.leave(); 
                return ctx.scene.enter(`showBalanceScene`); 
            }

            if(!amountText) {
                await ctx.reply(' ‚õîÔ∏è –ú—ã –Ω–µ –º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –í–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ');
                return
            }

            const amount: number = parseFloat(amountText);
            if(isNaN(amount)) { 
                await ctx.reply('‚õîÔ∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä—ã –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n- 1234 (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)\n- 567.89 (—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π).'); 
                return;
            }

             
            const transactionCategory = ctx.wizard.state.transactionCategory;
            const formattedAmount = amount.toLocaleString(`ru-Ru`, {minimumFractionDigits: 2, maximumFractionDigits: 2});
            const date = new Date().toISOString().slice(0,10);
    
            const transaction: ITransaction = { 
                userId, 
                amount, 
                category: transactionCategory, 
                date
            }

            ctx.wizard.state.transaction = transaction; 
            ctx.wizard.state.formattedAmount = formattedAmount; 
            await ctx.reply(`–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏.\n–ï—Å–ª–∏ –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.`, keyboards.cancelCommentKeyboard); 
            return ctx.wizard.next(); 
        }, 

        async (ctx) => { 
            const transaction = ctx.wizard.state.transaction; 
            const comment: string | undefined = ctx.message.text;
            const type: string = ctx.wizard.state.transactionType; 
            const formattedAmount:number = ctx.wizard.state.formattedAmount; 
            const currency: string = ctx.transactionRepository.getUserCurrency(transaction.userId) || "UAH";

            if(comment === '‚è© –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è') { 
                if(type === 'income' )
                ctx.transactionRepository.addIncome(transaction); 
                await ctx.reply(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ö–∞—Ç–µ–≥–æ—Ä–∏—é: ${transaction.category} \n---------------------- \n–°—É–º–º–∞: ${formattedAmount} ${currency}. `); 
                await ctx.reply('–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â–µ? –¢–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: ', keyboards.incomeCategoriesKeyboard);
            } else if (type ===  'expense') { 
                 ctx.transactionRepository.addExpense(transaction)
                await ctx.reply(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ö–∞—Ç–µ–≥–æ—Ä–∏—é: ${transaction.category} \n---------------------- \n–°—É–º–º–∞: ${formattedAmount} ${currency}. `);
                await ctx.reply('–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â–µ? –¢–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: ', keyboards.expenseCategoriesKeyboard);
            } else {
                transaction.comment = comment; 
                if(type === 'income' ) {
                ctx.transactionRepository.addIncome(transaction); 
                //await ctx.reply(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ö–∞—Ç–µ–≥–æ—Ä–∏—é: ${transaction.category} \n---------------------- \nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: "${transaction.comment}" \n–°—É–º–º–∞: ${formattedAmount} ${currency}. `); 
                let message = `‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ö–∞—Ç–µ–≥–æ—Ä–∏—é: ${transaction.category} \n---------------------- \nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: "${transaction.comment}" \n–°—É–º–º–∞: ${formattedAmount} ${currency}. `; 
                await ctx.reply(message, {parse_mode: "Markdown"});
                await ctx.reply('–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â–µ? –¢–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: ', keyboards.incomeCategoriesKeyboard);
            } else if (type ===  'expense') { 
                 ctx.transactionRepository.addExpense(transaction)
                let message = (`‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ö–∞—Ç–µ–≥–æ—Ä–∏—é: ${transaction.category}  \n---------------------- \nüìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: "${transaction.comment}" \n–°—É–º–º–∞: ${formattedAmount} ${currency}. `);
                await ctx.reply(message, {parse_mode: "Markdown"});
                await ctx.reply('–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â–µ? –¢–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: ', keyboards.expenseCategoriesKeyboard);
            }
        }

            delete ctx.wizard.state.transactionCategory; 
            
            return ctx.wizard.selectStep(0);

            }
    )