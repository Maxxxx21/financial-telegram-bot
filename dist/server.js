"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const telegraf_1 = require("telegraf");
const better_sqlite3_1 = __importDefault(require("better-sqlite3"));
require("dotenv/config");
const token = process.env["BOT_TOKEN"];
if (!token) {
    console.error("There is some problems with starting Bot.");
    process.exit(1);
}
const bot = new telegraf_1.Telegraf(token);
console.log('Bot starting...!');
const db = new better_sqlite3_1.default('finance.db', { verbose: console.log });
try {
    db.exec(`CREATE TABLE IF NOT EXISTS income(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        amount REAL NOT NULL,
        category TEXT,
        date TEXT NOT NULL
        );
`);
    console.log('table income created.');
    db.exec(`
    CREATE TABLE IF NOT EXISTS expense( 
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER NOT NULL,
      amount REAL NOT NULL,
      category TEXT,
      date TEXT NOT NULL
    );
`);
    console.log('table expense created.');
}
catch (err) {
    console.error("Troubles with database:", err.message);
    process.exit(1);
}
const insertIncomeStmt = db.prepare(`
        INSERT INTO income (user_id, amount, category, date) VALUES (?, ?, ?, ?)
    `);
const insertExpenseStmt = db.prepare(`
        INSERT INTO expense (user_id, amount, category, date) VALUES (?, ?, ?, ?)
    `);
// --- Keyboards ---
const startKeyboard = telegraf_1.Markup.keyboard([
    ['‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å', 'üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å'],
    ['üí∏ –ë–∞–ª–∞–Ω—Å']
]).resize().oneTime();
const mainCategories = telegraf_1.Markup.keyboard([
    ['üìà –î–æ—Ö–æ–¥—ã', 'üìâ –†–∞—Å—Ö–æ–¥—ã'],
    ['üí∏ –ë–∞–ª–∞–Ω—Å', '‚Ü©Ô∏è –ù–∞–∑–∞–¥']
]).resize().oneTime();
const incomeCategoriesKeyboard = telegraf_1.Markup.keyboard([
    ['üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞', 'üíª –§—Ä–∏–ª–∞–Ω—Å'],
    ['üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'üéÅ –ü–æ–¥–∞—Ä–∫–∏'],
    ['‚ûï –î—Ä—É–≥–æ–µ', '‚Ü©Ô∏è –ù–∞–∑–∞–¥'],
    ['üí∏ –ë–∞–ª–∞–Ω—Å']
]).resize().oneTime();
const expenseCategoriesKeyboard = telegraf_1.Markup.keyboard([
    ['üçî –ï–¥–∞', 'üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'],
    ['üè† –ñ–∏–ª—å–µ', 'üí° –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏'],
    ['üëï –û–¥–µ–∂–¥–∞', 'üè• –ó–¥–æ—Ä–æ–≤—å–µ'],
    ['üöó –ú–∞—à–∏–Ω–∞', '‚Ü©Ô∏è –ù–∞–∑–∞–¥'],
    ['üí∏ –ë–∞–ª–∞–Ω—Å']
]).resize().oneTime();
// --- Scene ‚Ññ1 Reacord Transaction ---
const recordTransaction = new telegraf_1.Scenes.WizardScene(`recordTransactionScene`, async (ctx) => {
    await ctx.reply(`–ß—Ç–æ –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å?`, mainCategories);
    return ctx.wizard.next();
}, async (ctx) => {
    const userId = ctx.from?.id;
    const type = ctx.message?.text;
    if (type === 'üìà –î–æ—Ö–æ–¥—ã') {
        ctx.wizard.state.transactionType = "income";
        const incomeResult = db.prepare(`SELECT SUM(amount) AS total FROM income WHERE user_id=?`).get(userId);
        const totalIncome = incomeResult.total || 0;
        const formattedTotalIncome = totalIncome.toLocaleString(`ru-RU`, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        await ctx.reply(`üí∞ –í–∞—à –æ–±—â–∏–π –¥–æ—Ö–æ–¥: ${formattedTotalIncome} UAH. \n–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞: `, incomeCategoriesKeyboard);
        return ctx.wizard.next();
    }
    else if (type === 'üìâ –†–∞—Å—Ö–æ–¥—ã') {
        ctx.wizard.state.transactionType = "expense";
        const expenseResult = db.prepare(`SELECT SUM(amount) AS total FROM expense WHERE user_id=?`).get(userId);
        const totalExpense = expenseResult.total || 0;
        const formattedTotalExpense = totalExpense.toLocaleString(`ru-RU`, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
        await ctx.reply(`üí∞ –í–∞—à –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: ${formattedTotalExpense} UAH. \n–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞: `, expenseCategoriesKeyboard);
        return ctx.wizard.next();
    }
    else if (type === '‚Ü©Ô∏è –ù–∞–∑–∞–¥') {
        await ctx.reply(`–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥.`);
        await ctx.reply(`–ß—Ç–æ –¥–µ–ª–∞–µ–º?`, startKeyboard);
        return ctx.scene.leave();
    }
}, async (ctx) => {
    const incomeCategories = ['üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞', 'üíª –§—Ä–∏–ª–∞–Ω—Å', 'üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'üéÅ –ü–æ–¥–∞—Ä–∫–∏', '‚ûï –î—Ä—É–≥–æ–µ'];
    const expenseCategories = ['üçî –ï–¥–∞', 'üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'üè† –ñ–∏–ª—å–µ', 'üí° –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏', 'üëï –û–¥–µ–∂–¥–∞', 'üè• –ó–¥–æ—Ä–æ–≤—å–µ', 'üöó –ú–∞—à–∏–Ω–∞'];
    const inputCategory = ctx.message.text;
    const isIncomeCategory = incomeCategories.includes(inputCategory);
    const isExpenseCategory = expenseCategories.includes(inputCategory);
    if (isIncomeCategory) {
        ctx.wizard.state.transactionCategory = inputCategory;
        await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏: `);
        return ctx.wizard.next();
    }
    else if (isExpenseCategory) {
        ctx.wizard.state.transactionCategory = inputCategory;
        await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏: `);
        console.log(`------ –ø–∏–∑–¥–∞ –∑–¥–µ—Å—å-----`);
        return ctx.wizard.next();
    }
    else if (inputCategory === '‚Ü©Ô∏è –ù–∞–∑–∞–¥') {
        await ctx.reply(`–ß—Ç–æ –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å?`, mainCategories);
        return ctx.wizard.selectStep(1);
    }
}, async (ctx) => {
    console.log(`---- –∏ –≤–æ—Ç —Ç—É—Ç -----`);
    const amountText = ctx.message?.text;
    const userId = ctx.from.id;
    const date = new Date().toISOString().slice(0, 10);
    console.log(`------- —Ç—É—Ç -------`);
    if (amountText === '‚Ü©Ô∏è –ù–∞–∑–∞–¥') {
        await ctx.reply(`–í–æ–∑–≤—Ä–∞–∑–∞–µ–º—Å—è –Ω–∞–∑–∞–¥.`);
        return ctx.wizard.selectStep(2);
    }
    if (!amountText) {
        await ctx.reply('–ú—ã –Ω–µ –º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –í–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ');
        return;
    }
    const amount = parseFloat(amountText);
    if (isNaN(amount)) {
        await ctx.reply('‚õîÔ∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä—ã –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n- 1234 (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)\n- 567.89 (—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π).');
        return;
    }
    const transactionType = ctx.wizard.state.transactionType;
    const transactionCategory = ctx.wizard.state.transactionCategory;
    const formattedAmount = amount.toLocaleString(`ru-Ru`, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    if (transactionType === "income") {
        insertIncomeStmt.run(userId, amount, transactionCategory, date);
        await ctx.reply(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ö–∞—Ç–µ–≥–æ—Ä–∏—é: ${transactionCategory} \n–°—É–º–º–∞: ${formattedAmount} UAH. `);
        await ctx.reply('–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â–µ? –¢–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: ', incomeCategoriesKeyboard);
    }
    else if (transactionType === "expense") {
        insertExpenseStmt.run(userId, amount, transactionCategory, date);
        await ctx.reply(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ö–∞—Ç–µ–≥–æ—Ä–∏—é: ${transactionCategory} \n–°—É–º–º–∞: ${formattedAmount} UAH. `);
        await ctx.reply('–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â–µ? –¢–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: ', expenseCategoriesKeyboard);
    }
    delete ctx.wizard.state.transactionCategory;
    return ctx.wizard.selectStep(2);
});
// --- Scene ‚Ññ2 Calculate Transaction ---
const calculateTransaction = new telegraf_1.Scenes.WizardScene(`calculationScene`, async (ctx) => {
    await ctx.reply(`–ö–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±—É–¥–µ–º —Å–º–æ—Ç—Ä–µ—Ç—å?`, mainCategories);
    return ctx.wizard.next();
}, async (ctx) => {
    const type = ctx.message.text;
    if (type === 'üìà –î–æ—Ö–æ–¥—ã') {
        ctx.wizard.state.transactionType = 'income';
    }
    else if (type === 'üìâ –†–∞—Å—Ö–æ–¥—ã') {
        ctx.wizard.state.transactionType = 'expense';
    }
    else if (type === '‚Ü©Ô∏è –ù–∞–∑–∞–¥') {
        await ctx.reply('–ß—Ç–æ –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å ?', startKeyboard);
        return ctx.scene.leave();
    }
    else {
        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ "–î–æ—Ö–æ–¥—ã" –∏–ª–∏ "–†–∞—Å—Ö–æ–¥—ã"');
    }
    await ctx.reply(`–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n- **2025-11-29** (–¥–ª—è –æ–¥–Ω–æ–π –¥–∞—Ç—ã)\n- **2025-11-01/2025-11-30** (–¥–ª—è –ø–µ—Ä–∏–æ–¥–∞)`, { parse_mode: "Markdown" });
    return ctx.wizard.next();
}, async (ctx) => {
    const dateOrPeriodInput = ctx.message?.text;
    const userId = ctx.from.id;
    const transactionType = ctx.wizard.state.transactionType;
    if (!transactionType) {
        await ctx.reply(`–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.`, startKeyboard);
        return ctx.scene.leave();
    }
    if (dateOrPeriodInput === '‚Ü©Ô∏è –ù–∞–∑–∞–¥') {
        await ctx.reply('–ß—Ç–æ –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å?', startKeyboard);
        return ctx.wizard.selectStep(1);
    }
    const date = /^\d{4}-\d{2}-\d{2}$/;
    const period = /^\d{4}-\d{2}-\d{2}\/\d{4}-\d{2}-\d{2}$/;
    let query = ``;
    let params = [userId];
    if (date.test(dateOrPeriodInput)) {
        query = `SELECT amount, category, date FROM ${transactionType} WHERE user_id=? AND date=?`;
        params.push(dateOrPeriodInput);
    }
    else if (period.test(dateOrPeriodInput)) {
        const [startDate, endDate] = dateOrPeriodInput.split('/');
        query = `SELECT amount, category, date FROM ${transactionType} WHERE user_id=? AND date BETWEEN ? AND ?`;
        params.push(startDate, endDate);
    }
    else {
        await ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –ø–µ—Ä–∏–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \n- **2025-11-29**\n- **2025-11-01/2025-11-30**', { parse_mode: 'Markdown' });
        return;
    }
    const transactions = db.prepare(query).all(...params);
    let message = `**–í–∞—à–∏ ${transactionType === 'income' ? '–¥–æ—Ö–æ–¥—ã' : '—Ä–∞—Å—Ö–æ–¥—ã'}:**\n\n`;
    if (transactions.length === 0) {
        message += `–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥`;
    }
    else {
        transactions.forEach((t) => {
            message += `${t.date} | ${t.category}: ${t.amount.toFixed(2)} UAH\n`;
        });
    }
    await ctx.reply(message, { parse_mode: "Markdown" });
    await ctx.reply('–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?', startKeyboard);
    return ctx.scene.leave();
});
const stage = new telegraf_1.Scenes.Stage([recordTransaction, calculateTransaction]);
bot.use((0, telegraf_1.session)());
bot.use(stage.middleware());
// --- Handle keyboard press
bot.start((ctx) => {
    let username = ctx.from?.username || ctx.from?.first_name;
    ctx.reply(`
            –ü—Ä–∏–≤–µ—Ç, ${username}! –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å –æ–ø–µ—Ä–∞—Ü–∏–µ–π:
            `, startKeyboard);
});
bot.hears('üëÄ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å', async (ctx) => {
    return ctx.scene.enter(`calculationScene`);
});
bot.hears('‚úçÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å', async (ctx) => {
    return ctx.scene.enter(`recordTransactionScene`);
});
bot.hears('üí∏ –ë–∞–ª–∞–Ω—Å', async (ctx) => {
    const userId = ctx.from.id;
    const incomeResult = db.prepare(`SELECT SUM(amount) AS total FROM income WHERE user_id=?`).get(userId);
    const totalIncome = incomeResult.total || 0;
    const formattedTotalIncome = totalIncome.toLocaleString(`ru-RU`, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    const expenseResult = db.prepare(`SELECT SUM(amount) AS total FROM expense WHERE user_id=?`).get(userId);
    const totalExpense = expenseResult.total || 0;
    const formattedTotalExpense = totalExpense.toLocaleString(`ru-RU`, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    const currentBalance = totalIncome - totalExpense;
    const formattedCurrentBalance = currentBalance.toLocaleString(`ru-RU`, { minimumFractionDigits: 2, maximumFractionDigits: 2 });
    let message = `üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:\n`;
    message += `–î–æ—Ö–æ–¥—ã: ${formattedTotalIncome} UAH\n`;
    message += `–†–∞—Å—Ö–æ–¥—ã: -${formattedTotalExpense} UAH\n`;
    message += `-----------------------------------------\n`;
    message += `–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${formattedCurrentBalance} UAH.`;
    ctx.reply(message);
    await ctx.reply(`–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?`, startKeyboard);
});
const handleClickCancel = async (ctx) => {
    if (ctx.scene.current) {
        const stepNumber = ctx.wizard.cursor;
        if (stepNumber > 0) {
            await ctx.reply(`üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞–∑–∞–¥.`);
            return ctx.wizard.back();
        }
        else {
            await ctx.reply(`‚Ü©Ô∏è –î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.`, startKeyboard);
            return ctx.scene.leave();
        }
    }
    else {
        await ctx.reply('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.');
        delete ctx.session.transactionCategory;
        delete ctx.session.transactionType;
        await ctx.reply(`–ß—Ç–æ –±—É–¥–µ–º %%% ?`, startKeyboard);
    }
};
bot.hears('‚Ü©Ô∏è –ù–∞–∑–∞–¥', handleClickCancel);
bot.launch();
