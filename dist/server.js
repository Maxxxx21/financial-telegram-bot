"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const telegraf_1 = require("telegraf");
const better_sqlite3_1 = __importDefault(require("better-sqlite3"));
require("dotenv/config");
const token = process.env["BOT_TOKEN"];
if (!token) {
    console.error("There is some problems with starting Bot.");
    process.exit(1);
}
const bot = new telegraf_1.Telegraf(token);
console.log('Bot starting...!');
const db = new better_sqlite3_1.default('finance.db', { verbose: console.log });
try {
    db.exec(`CREATE TABLE IF NOT EXISTS income(
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        amount REAL NOT NULL,
        category TEXT,
        date TEXT NOT NULL
        );
`);
    console.log('table income created.');
    db.exec(`
    CREATE TABLE IF NOT EXISTS expense( 
      id INTEGER PRIMARY KEY AUTOINCREMENT,
      user_id INTEGER NOT NULL,
      amount REAL NOT NULL,
      category TEXT,
      date TEXT NOT NULL
    );
`);
    console.log('table expense created.');
}
catch (err) {
    console.error("Troubles with database:", err.message);
    process.exit(1);
}
const insertIncomeStmt = db.prepare(`
        INSERT INTO income (user_id, amount, category, date) VALUES (?, ?, ?, ?)
    `);
const insertExpenseStmt = db.prepare(`
        INSERT INTO expense (user_id, amount, category, date) VALUES (?, ?, ?, ?)
    `);
const amountInput = new telegraf_1.Scenes.WizardScene(`amountInputScene`, async (ctx) => {
    if (ctx.session.transactionCategory && ctx.session.transactionType) {
        ctx.wizard.state.transactionCategory = ctx.session.transactionCategory;
        ctx.wizard.state.transactionType = ctx.session.transactionType;
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏: ');
        return ctx.wizard.next();
    }
}, async (ctx) => {
    const amountText = ctx.message?.text;
    const userId = ctx.from.id;
    const date = new Date().toISOString().slice(0, 10);
    if (!amountText) {
        await ctx.reply('–ú—ã –Ω–µ –º–æ–∂–µ–º –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –í–∞—à–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ');
        return;
    }
    const amount = parseFloat(amountText);
    if (isNaN(amount)) {
        await ctx.reply('‚õîÔ∏è –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü—Ä–∏–º–µ—Ä—ã –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n- 1234 (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)\n- 567.89 (—á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π).');
        return;
    }
    const transactionType = ctx.wizard.state.transactionType;
    const transactionCategory = ctx.wizard.state.transactionCategory;
    if (transactionType === "income") {
        insertIncomeStmt.run(userId, amount, transactionCategory, date);
        await ctx.reply(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ö–∞—Ç–µ–≥–æ—Ä–∏—é: ${transactionCategory} \n–°—É–º–º–∞: ${amount.toFixed(2)} UAH. `);
        await ctx.reply('–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â–µ? –¢–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: ', incomeCategoriesKeyboard);
    }
    else if (transactionType === "expense") {
        insertExpenseStmt.run(userId, amount, transactionCategory, date);
        await ctx.reply(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –ö–∞—Ç–µ–≥–æ—Ä–∏—é: ${transactionCategory} \n–°—É–º–º–∞: ${amount.toFixed(2)} UAH. `);
        await ctx.reply('–•–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â–µ? –¢–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞: ', expenseCategoriesKeyboard);
    }
    return ctx.scene.leave();
});
const stage = new telegraf_1.Scenes.Stage([amountInput]);
bot.use((0, telegraf_1.session)());
bot.use(stage.middleware());
bot.start((ctx) => {
    let username = ctx.from.username || ctx.from.first_name;
    ctx.reply(`–ü—Ä–∏–≤–µ—Ç, ${username}! –î–∞–≤–∞–π –∑–∞–ø–∏—à–µ–º —Ç–≤–æ–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏—é. –í –∫–∞–∫—É—é —Å—Ñ–µ—Ä—É –±—É–¥–µ–º –≤–Ω–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?`, telegraf_1.Markup.keyboard([
        ['üìà –î–æ—Ö–æ–¥—ã', 'üìâ –†–∞—Å—Ö–æ–¥—ã'],
        ['üí∏ –ë–∞–ª–∞–Ω—Å']
    ]).resize().oneTime());
});
bot.hears('üìà –î–æ—Ö–æ–¥—ã', async (ctx) => {
    const userId = ctx.from.id;
    const incomeResult = db.prepare(`SELECT SUM(amount) AS total FROM income WHERE user_id=?`).get(userId);
    const totalIncome = incomeResult.total || 0;
    ctx.session.transactionType = "income";
    await ctx.reply(`üí∞ –í–∞—à –æ–±—â–∏–π –¥–æ—Ö–æ–¥: ${totalIncome.toFixed(2)}. \n–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ—Ö–æ–¥–∞: `, incomeCategoriesKeyboard);
});
bot.hears('üìâ –†–∞—Å—Ö–æ–¥—ã', async (ctx) => {
    const userId = ctx.from.id;
    const expenseResult = db.prepare(`SELECT SUM(amount) AS total FROM expense WHERE user_id=?`).get(userId);
    const totalExpense = expenseResult.total || 0;
    ctx.session.transactionType = "expense";
    await ctx.reply(`üí∞ –í–∞—à–∏ –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: -${totalExpense.toFixed(2)}. \n–í—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤: `, expenseCategoriesKeyboard);
});
const incomeCategories = ['üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞', 'üíª –§—Ä–∏–ª–∞–Ω—Å', 'üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'üéÅ –ü–æ–¥–∞—Ä–∫–∏', '‚ûï –î—Ä—É–≥–æ–µ'];
incomeCategories.forEach((category) => {
    bot.hears(category, async (ctx) => {
        if (ctx.session.transactionType === 'income') {
            ctx.session.transactionCategory = category;
            return ctx.scene.enter('amountInputScene');
        }
        else {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–î–æ—Ö–æ–¥—ã", –∑–∞—Ç–µ–º —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.');
        }
    });
});
const expenseCategories = ['üçî –ï–¥–∞', 'üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', 'üè† –ñ–∏–ª—å–µ', 'üí° –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏', 'üëï –û–¥–µ–∂–¥–∞', 'üè• –ó–¥–æ—Ä–æ–≤—å–µ', 'üöó –ú–∞—à–∏–Ω–∞'];
expenseCategories.forEach((category) => {
    bot.hears(category, async (ctx) => {
        if (ctx.session.transactionType === 'expense') {
            ctx.session.transactionCategory = category;
            return ctx.scene.enter('amountInputScene');
        }
        else {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é "–†–∞—Å—Ö–æ–¥—ã", –∑–∞—Ç–µ–º —É–∂–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.');
        }
    });
});
bot.hears('üí∏ –ë–∞–ª–∞–Ω—Å', async (ctx) => {
    console.log("debug –≤ –∫–Ω–æ–ø–∫—É –±–∞–ª–∞–Ω—Å");
    const userId = ctx.from.id;
    const incomeResult = db.prepare(`SELECT SUM(amount) AS total FROM income WHERE user_id=?`).get(userId);
    const totalIncome = incomeResult.total || 0;
    const expenseResult = db.prepare(`SELECT SUM(amount) AS total FROM expense WHERE user_id=?`).get(userId);
    const totalExpense = expenseResult.total || 0;
    const currentBalance = totalIncome - totalExpense;
    let message = `üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:\n`;
    message += `–î–æ—Ö–æ–¥—ã: ${totalIncome.toFixed(2)} UAH\n`;
    message += `–†–∞—Å—Ö–æ–¥—ã: -${totalExpense.toFixed(2)} UAH\n`;
    message += `-----------------------------------------\n`;
    message += `–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance} UAH.`;
    ctx.reply(message);
});
const incomeCategoriesKeyboard = telegraf_1.Markup.keyboard([
    ['üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞', 'üíª –§—Ä–∏–ª–∞–Ω—Å'],
    ['üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', 'üéÅ –ü–æ–¥–∞—Ä–∫–∏'],
    ['‚ûï –î—Ä—É–≥–æ–µ', '‚Ü©Ô∏è –ù–∞–∑–∞–¥'],
    ['üí∏ –ë–∞–ª–∞–Ω—Å']
]).resize().oneTime();
const expenseCategoriesKeyboard = telegraf_1.Markup.keyboard([
    ['üçî –ï–¥–∞', 'üöå –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç'],
    ['üè† –ñ–∏–ª—å–µ', 'üí° –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏'],
    ['üëï –û–¥–µ–∂–¥–∞', 'üè• –ó–¥–æ—Ä–æ–≤—å–µ'],
    ['üöó –ú–∞—à–∏–Ω–∞', '‚Ü©Ô∏è –ù–∞–∑–∞–¥'],
    ['üí∏ –ë–∞–ª–∞–Ω—Å']
]).resize().oneTime();
const handleClickCancel = async (ctx) => {
    if (ctx.scene.current) {
        await ctx.reply("–î–µ–π—Å—Ç–≤–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
        delete ctx.wizard.state;
        return ctx.scene.leave();
    }
    else {
        await ctx.reply('–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π.');
        delete ctx.session.transactionCategory;
        delete ctx.session.transactionType;
        await ctx.reply(`–ß—Ç–æ –±—É–¥–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å ?`, telegraf_1.Markup.keyboard([
            ['üìà –î–æ—Ö–æ–¥—ã', 'üìâ –†–∞—Å—Ö–æ–¥—ã'],
            ['üí∏ –ë–∞–ª–∞–Ω—Å']
        ]).resize().oneTime());
    }
};
bot.hears('‚Ü©Ô∏è –ù–∞–∑–∞–¥', handleClickCancel);
bot.launch();
